<?php

/**
 * @file
 * Contains ui_patterns.module.
 */

use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme().
 */
function ui_patterns_theme($existing, $type, $theme, $path) {
  $items = [
    'patterns_overview_page' => [
      'variables' => ['patterns' => NULL],
      'path' => $path . '/templates',
    ],
    'patterns_single_page' => [
      'variables' => ['pattern' => NULL],
      'path' => $path . '/templates',
    ],
  ];

  $definitions = \Drupal::service('plugin.manager.ui_patterns')->getDefinitions();
  foreach ($definitions as $definition) {
    $items[$definition['theme hook']] = [
      'variables' => $definition['theme variables'],
      'libraries' => $definition['libraries'],
      'preprocess functions' => ['ui_patterns_preprocess_pattern']
    ];

    if (!$definition['custom theme hook'] && \Drupal::moduleHandler()->moduleExists($definition['provider'])) {
      $items[$definition['theme hook']]['path'] = drupal_get_path('module', $definition['provider']) . '/templates';
    }
  }
  return $items;
}

/**
 * Implement template_preprocess_HOOK().
 */
function ui_patterns_preprocess_pattern(&$variables, $hook, $info) {

  // Turn attribute array into a fully-fledged attribute object.
  if (isset($variables['attributes']) && !empty($variables['attributes']) && is_array($variables['attributes'])) {
    $variables['attributes'] = new Attribute($variables['attributes']);
  }
  else {
    $variables['attributes'] = new Attribute();
  }

  /* @var \Drupal\ui_patterns\UiPatternsManager $manager */
  $manager = \Drupal::service('plugin.manager.ui_patterns');
  $definition = $manager->getDefinitionByThemeHook($hook);
  foreach ($definition['libraries'] as $library) {
    $variables['#attached']['library'][] = $library;
  }
}
